# analysing text
POST /_analyze
{
  "text": "2 guys work into   a bar, but the third... DUCKS! :-)",
  "analyzer": "standard"
}

POST /_analyze
{
  "text": "2 guys work into   a bar, but the third... DUCKS! :-)",
  "char_filter": [],
  "tokenizer": "standard",
  "filter": ["lowercase"]
}

# no-op / no changes applied: used for exact match search
POST /_analyze
{
  "text": "2 guys work into   a bar, but the third... DUCKS! :-)",
  "analyzer": "keyword"
}

PUT /review
{
  "mappings": {
    "properties": {
      "rating": { "type": "float" },
      "content": {"type": "text"},
      "product_id": {"type": "integer"},
      "author": {
        "properties": {
          "first_name": {"type": "text"},
          "last_name": {"type": "text"},
          "email": {"type": "keyword"}
        }
      }
    }
  }
}

# dot notation in field names
PUT /review_dot_notation
{
  "mappings": {
    "properties": {
      "rating": { "type": "float" },
      "content": {"type": "text"},
      "product_id": {"type": "integer"},
      "author.first_name": {"type": "text"},
      "author.last_name": {"type": "text"},
      "author.email": {"type": "keyword"}
    }
  }
}

PUT /review/_doc/1
{
  "rating": 5.0,
  "content": "Outstanding course! Learning a lot during this course",
  "product_id": 123,
  "author": {
    "first_name": "Thierno Amirou",
    "last_name": "Diallo",
    "email": "thierno@gmail.com"
  }
}
PUT /review/_doc/2
{
  "rating": 3.0,
  "content": "Not very interesting. Too much noise.",
  "product_id": 456,
  "author": {
    "first_name": "Thierno Amirou",
    "last_name": "Diallo",
    "email": "thierno@gmail.com"
  }
}


GET /review/_doc/1

# retrieving mappings
GET /review/_mapping
GET /review/_mapping/field/content
GET /review/_mapping/field/author.email

# updating a mapping
PUT /review/_mapping
{
  "properties": {
    "created_at": {
      "type": "date"
    }
  }
}

GET /review/_mapping

# re-indexing
PUT /review_new
{
  "mappings" : {
    "properties" : {
      "author" : {
        "properties" : {
          "email" : {
            "type" : "keyword"
          },
          "first_name" : {
            "type" : "text"
          },
          "last_name" : {
            "type" : "text"
          }
        }
      },
      "content" : {
        "type" : "text"
      },
      "created_at" : {
        "type" : "date"
      },
      "produc_id" : {
        "type" : "long"
      },
      "product_id" : {
        "type" : "keyword"
      },
      "rating" : {
        "type" : "float"
      }
    }
  }
}

POST /_reindex
{
  "source": {
    "index": "review"

  },
  "dest": {
    "index": "review_new"
  }
}

# re-indexing and change product_id source data type
POST /_reindex
{
  "source": {
    "index": "review",
    "_source": ["content", "cretated", "rating" ],
    "query": {
      "range": {
        "rating": {
          "gte": 4,
          "lte": 5
        }
      }
    }
  },
  "dest": {
    "index": "review_new"
  },
  "script": {
    "source": """
      if (ctx._source.product_id != null) {
        ctx._source.product_id = ctx._source.product_id.toString();
      }
      ctx._source.comment = ctx._source.remove("content");
    """
  }
}

GET /review/_search
{
  "query": {
    "match_all": {}
  }
}

GET /review_new/_search
{
  "query": {
    "match_all": {}
  }
}

# delete by search
POST /review_new/_delete_by_query
{
  "query": {
    "match_all": {}
  }
}


# Field Alias
PUT /review/_mapping
{
  "properties": {
    "comment": {
      "type": "alias",
      "path": "content"
    }
  }
}

GET /review/_search
{
  "query": {
    "match": {
      "content": "outstanding"
    }
  }
}
GET /review/_search
{
  "query": {
    "match": {
      "comment": "outstanding"
    }
  }
}

# Multi field mappings
PUT /multi_field_mappings
{
  "mappings": {
    "properties": {
      "description": { "type": "text" },
      "ingredients": {
        "type": "text",
        "fields": {
          "keyword": {
            "type": "keyword"
          }
        }
      }
    }
  }
}
GET /multi_field_mappings/_mapping
POST /multi_field_mappings/_doc
{
  "description": "To make scrambled eggs, you need to ...",
  "ingredients": ["Eggs", "Salt", "Oil"]
}

GET /multi_field_mappings/_search
{
  "query": {
    "match_all": {}
  }
}

GET /multi_field_mappings/_search
{
  "query": {
    "match": {
      "ingredients": "eggs"
    }
  }
}
# exact term match
GET /multi_field_mappings/_search
{
  "query": {
    "term": {
      "ingredients.keyword": "Eggs"
    }
  }
}

# mapping template
PUT /_template/access-logs
{
  "index_patterns": ["access-logs-*"],
  "settings": {
    "number_of_shards": 2,
    "number_of_replicas": 2,
    "index.mapping.coerce": false
  },
  "mappings": {
    "properties": {
      "@timestamp": { "type": "date" },
      "url.original": {"type": "keyword"},
      "http.request.refferer": {"type": "keyword"},
      "http.reponse.status_code": {"type": "long"}
    }
  }
}
GET /_template/access-logs

PUT /access-logs-2022-06-03

GET /access-logs-2022-06-03

# dynamic mapping
PUT /people
{
  "mappings": {
    "dynamic": false,
    "properties": {
      "first_name": { "type": "text" }
    }
  }
}

GET /people/_mapping

POST /people/_doc
{
  "first_name": "thierno",
  "last_name": "diallo"
}

GET /people/_search
{
  "query": {
    "match": {
      "first_name": "thierno"
    }
  }
}

GET /people/_search
{
  "query": {
    "match": {
      "last_name": "diallo"
    }
  }
}

DELETE /people

PUT /people
{
  "mappings": {
    "dynamic": "strict",
    "properties": {
      "first_name": { "type": "text" }
    }
  }
}

POST /people/_doc
{
  "first_name": "thierno",
  "last_name": "diallo"
}

# numeric and date detection
PUT /computers
{
  "mappings": {
    "dynamic": true,
    "date_detection": true,
    "dynamic_date_formats": ["yyyy-MM-dd"],
    "numeric_detection": true,
    "properties": {
      "first_name": { "type": "text", "analyzer": "english" }
    }
  }
}

# custum analyzer
POST /_analyze
{
  "char_filter": ["html_strip"],
  "text": "I'am in a &lt;em&gt;good&lt;/em&gt; mood and I &lt;strong&gt;love&lt;/strong&gt; açaí!"
}
POST /_analyze
{
  "char_filter": ["html_strip"],
  "text": "I'am in a <em>good</em> mood and I <strong>love</strong> açaí!"
}

PUT /analyzer_test
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_custum_analyzer": {
          "type": "custom",
          "char_filter": ["html_strip"],
          "tokenizer": "standard",
          "filter": ["lowercase", "stop", "asciifolding"]
        }
      }
    }
  }
}

POST /analyzer_test/_analyze
{
  "analyzer": "my_custum_analyzer",
  "text": "I'am in a <em>good</em> mood and I <strong>love</strong> the açaí!"
}

# non english stop filter example
DELETE /french_stop_test
PUT /french_stop_test
{
  "settings": {
    "analysis": {
      "filter": {
        "french_stop": {
          "type": "stop",
          "stopwords": "_french_"
        }
      },
      "analyzer": {
        "my_custum_analyzer": {
          "type": "custom",
          "char_filter": ["html_strip"],
          "tokenizer": "standard",
          "filter": ["lowercase", "french_stop", "asciifolding"]
        }
      }
    }
  }
}
POST /french_stop_test/_analyze
{
  "analyzer": "my_custum_analyzer",
  "text": "je suis dans un <em>bon</em> état et j'aime <strong>beaucoup</strong> le à du de le ce açaí!"
}

# updating index analyser settings
POST /analyzer_test/_close

# modifying an existing analyzer
PUT /analyzer_test/_settings
{
  "analysis": {
      "analyzer": {
        "my_custum_analyzer": {
          "type": "custom",
          "char_filter": ["html_strip"],
          "tokenizer": "standard",
          "filter": ["lowercase", "asciifolding"]
        }
      }
    }
}
# adding a new analyser
PUT /analyzer_test/_settings
{
  "analysis": {
      "analyzer": {
        "my_second_analyzer": {
          "type": "custom",
          "char_filter": ["html_strip"],
          "tokenizer": "standard",
          "filter": ["lowercase", "stop", "asciifolding"]
        }
      }
    }
}

GET /analyzer_test/_settings

POST /analyzer_test/_open

# reindexing all document to use the latest version of the analyser
POST /analyzer_test/_update_by_query?conflicts=proceed